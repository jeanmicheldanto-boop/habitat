// Test simple pour v√©rifier les donn√©es de mod√©ration
console.log('üß™ Test des donn√©es de mod√©ration');

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (vous devrez ajuster selon votre .env.local)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå Variables d\'environnement Supabase manquantes');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', !!supabaseKey);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testModerationData() {
  try {
    // Test 1: V√©rifier les propositions
    console.log('\nüìã Test des propositions...');
    const { data: propositions, error: propError } = await supabase
      .from('propositions')
      .select('*')
      .limit(5);
    
    if (propError) {
      console.error('‚ùå Erreur propositions:', propError);
    } else {
      console.log(`‚úÖ Trouv√© ${propositions?.length || 0} propositions`);
      if (propositions && propositions.length > 0) {
        propositions.forEach((p, i) => {
          console.log(`  ${i + 1}. ID: ${p.id}, Type: ${p.type_cible}, Action: ${p.action}, Statut: ${p.statut}`);
        });
      }
    }

    // Test 2: V√©rifier les r√©clamations
    console.log('\nüè¢ Test des r√©clamations...');
    const { data: reclamations, error: reclamError } = await supabase
      .from('reclamations_propriete')
      .select('*')
      .limit(5);
    
    if (reclamError) {
      console.error('‚ùå Erreur r√©clamations:', reclamError);
    } else {
      console.log(`‚úÖ Trouv√© ${reclamations?.length || 0} r√©clamations`);
      if (reclamations && reclamations.length > 0) {
        reclamations.forEach((r, i) => {
          console.log(`  ${i + 1}. ID: ${r.id}, √âtablissement: ${r.etablissement_id}, Statut: ${r.statut}`);
        });
      }
    }

    // Test 3: V√©rifier les profils (pour le syst√®me d'auth)
    console.log('\nüë§ Test des profils...');
    const { data: profiles, error: profileError } = await supabase
      .from('profiles')
      .select('id, role, email')
      .limit(5);
    
    if (profileError) {
      console.error('‚ùå Erreur profils:', profileError);
    } else {
      console.log(`‚úÖ Trouv√© ${profiles?.length || 0} profils`);
      if (profiles && profiles.length > 0) {
        profiles.forEach((p, i) => {
          console.log(`  ${i + 1}. ID: ${p.id}, Role: ${p.role}, Email: ${p.email}`);
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

testModerationData();